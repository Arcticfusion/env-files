#!/bin/bash
name_="env.tools"
if ! [ -n "$_ENV_TOOLS_INIT" ]; then
  export _ENV_TOOLS_INIT="True"
else
  >&2 echo "Already Initialising $name_"
  return
fi
>&2 echo "Initialising $name_"
unset name_
# ENV TOOLS START

# Suppress STDOUT and STDERR
quiet(){
    eval "$@" &> /dev/null
    return $?
}
muted(){
    eval "$@" 2> /dev/null
    return $?
}
exporf () { quiet export -f "$@"; }
exporf exporf quiet muted

# Checks for the dependancies of the functions
checkt () { >/dev/null type "$@"; }
check_dependancies () {
  local result=0
  local dependancies=("$@")
  if test $# -eq 0; then
  dependancies=( "git" "conda" "rsync" "conan")
  fi
  for cmd_ in "${dependancies[@]}"; do
    checkt "$cmd_" || result=$?
  done
  return $result
}
exporf checkt check_dependancies

# STDERR Messages
ercho () { echo -e "$@\e[0m" >&2; }
errcho() { ercho "\e[31m[ERROR]\t$@"; }
warcho() { ercho "\e[33m[WARN]\t$@"; }
infcho() { ercho "\e[35m[INFO]\t$@"; }
grecho() { ercho "\e[32m[GOOD]\t$@"; }
exporf ercho errcho warcho infcho grecho

test -z "${ENV_REPO}" && export ENV_REPO=$(realpath "${HOME}/.bashrc" | sed -E 's#/[^/]*$##')
load_env_file() {
  for i in "$@"; do
    test -e  "${ENV_REPO}/$i" && source "${ENV_REPO}/$i" ||
    ercho "${_orange}No file '${ENV_REPO}/$i'"
  done
}
exporf load_env_file

# Adds each argument to the path if it is a valid directory path
add_to_path() {
  local path_=''
  while test $# -gt 0; do
    path_="$1"
    shift
    test -d "$path_" &&
      export PATH="$path_:$PATH"
  done
}

# Debug Settings
set_debug() {
  if test $# -eq 0; then
    ENV_DEBUG="TRUE${ENV_DEBUG/#/:}"
  fi
  while test $# -gt 0; do
    compgen -c | quiet grep -w "$1" &&
      echo "${ENV_DEBUG}" | quiet grep -vw "$1" &&
    ENV_DEBUG="${1}${ENV_DEBUG/#/:}"
    shif
  done
  export ENV_DEBUG="$(
      sed -E -e 's/:+/:/g' -e 's/(^:|:$)//g' <<< ":$(echo "${ENV_DEBUG}" | sed 's/:/::/g'):"
      )"
}

unset_debug() {
  if test $# -eq 0; then
    test "${ENV_DEBUG}" &&
    ercho "${YELLOW}unset ENV_DEBUG=${ENV_DEBUG}"
    unset ENV_DEBUG
  else
    local pattern="$(printf %s "${@/#/|}" | sed -E 's/^.(.*)/(\1)/' )"
    export ENV_DEBUG="$(
      sed -E -e 's/:'"$pattern"'://g' -e 's/:+/:/g' -e 's/(^:|:$)//g' <<< ":$(echo "${ENV_DEBUG}" | sed 's/:/::/g'):"
    )"
  fi
}
if_debug_mode() {
  local pattern="$(
    printf '%s' "TRUE${@/#/|}" |
      sed -E -e 's/[^(|]*[^A-Za-z0-9\|_-]+[^|)]*//g'
      -e 's/\|+/|/g'
      -e 's/(^\||\|$)//g' )"
  quiet egrep -w "$pattern" <<<"$ENV_DEBUG"
}
exporf set_debug unset_debug if_debug_mode

# Run a command, echoing the command if
# debug mode is on for that command
drun() {
  local cmd_=("$@")
  if_debug_mode "${cmd_[@]}" &&
  >&2 printf '\e[35m > %s\n\e[0m' "${cmd_[*]}"
  eval "${cmd_[@]}"
}
# Run a command, echoing the command before hand
run() {
  local cmd_=("$@")
  local env_prompt=$( echo $PS1 | sed -E 's/\$.*//' | sed -E 's#\)[^)]*$#)#' | sed -E 's#[^)]*(\([^)]*\))#\1#g' | grep "(" )
  >&2 printf '\e[35m%s > %s\n\e[0m' "${env_prompt}" "${cmd_[*]}"
  eval "${cmd_[@]}"
}
# Run a command, echoing the prompt and command before hand
prun() {
  local cmd_=("$@")
  ercho "${_magenta}AUTO ${PS1@P}${_magenta}\n > ${cmd_[*]}"
  eval "${cmd_[@]}"
}
exporf run prun drun

# Environment
export SHELL="$(which $(ps $$ | tail -n1 | awk '{print $5}' | sed 's/^-//'))"
export SHELL_NAME="$(echo "$SHELL" | sed -E 's#(.*/)?([^/]*)sh$#\2sh#')"
check_shell () {
  test $# -eq 0 && echo $SHELL && return $?
  [[ "$1" == "$SHELL_NAME" ]] || [[ "$1" == "$SHELL" ]]
}
exporf check_shell



# Pass all input as strings
get_input_strs () {
  local input=""
  [[ -p /dev/stdin ]] &&
    input="$(cat -)" ||
    input="$(for arg in "$@"; do echo "$arg"; done; )"
  [[ -z "${input}" ]] &&
    return 1
  echo "${input}"
}
exporf get_input_strs

# Decrement
dec () {
  while test $# -gt 0; do
    (($1-=1))
    shift
  done
}
# Increment
inc () {
  while test $# -gt 0; do
    (($1+=1))
    shift
  done
}
exporf inc dec

# Formatting
export DATE_FORMAT='%Y%m%d%H%M'
export DATE_PATTERN='(((20|19)[0-9]{2})(0[1-9]|1[0-2])(0[1-9]|[1-2][0-9]|3[0-1]))(([01][0-9]|2[0-3])([3-5][0-9])|)'
date_str () { date +"$DATE_FORMAT"; }
exporf date_str
export KEY="$(date_str)-$(echo "$SHELL" | sed -E 's#.*/##')-$$"
dtag () {
while test $# -gt 0; do
  local counter='' suffix=''
  while test -e "$1"; do
    quiet rename 's/^/'"$(date +$DATE_FORMAT)-${suffix}/" $1
    inc counter
    suffix=$counter-
  done
  shift
done
}

join_by () {
  local d=${1-} f=${2-}
  if shift 2; then
    printf %s "$f" "${@/#/$d}"
  fi
}

_sanitise_var_name () {
  echo "$1" | sed 's/[a-z0-9]+/_/gi'
}
_sanitise_env_var_names () {
  while test $# -gt 0; do
    _sanitise_var_name "$1" | upper
    shift 1
  done
}

# Environment Array Implementation
_init_env_array () {
  for arg in "$@"; do
    # Sanitise Name
    arg="$( _sanitise_var_name "$arg" | upper )"
    # Init size = 0
    eval ${arg}_SIZE=0
    export ${arg}_SIZE
  done;
}
_get_index_var_name_env_array () {
  local array_name="$( _sanitise_env_var_names "$1" )"
  shift 1
  for arg in "$@"; do
    is_uint $arg &&
      test $arg -le $size &&
      echo "${array_name}_${arg}" ||
      >&2 echo "$arg is not a valid index"
  done
}
_push_env_array () {
  local array_name="$( _sanitise_env_var_names "$1" )"
  shift 1
  while read line; do
    inc ${array_name}_SIZE
    eval "$(eval echo '${array_name}_${'"${array_name}"'_SIZE}="$line"')"
    eval "export $(echo "${array_name}_SIZE" '${array_name}_${'"${array_name}"'_SIZE}')"
  done < <(get_input_strs "$@" <&1 2>/dev/null)
}
_pop_env_array () {
  local array_name="$( _sanitise_env_var_names "$1" )"
  shift 1
  local var_name="$(eval echo -n "$(echo -n "${array_name}"'_${'"${array_name}"'_SIZE}')")"
  eval 'echo ${'"$var_name"'}'
  dec ${array_name}_SIZE
  unset $var_name
}
_at_env_array () {
  local array_name="$( _sanitise_env_var_names "$1" )"
  eval test -n '"${'"$array_name"'_SIZE}"' || return 1
  shift 1
  local size="$(eval echo -n $(echo -n '${'"$array_name"'_SIZE}'))"
  for arg in "$@"; do
    eval echo '${'"$(_get_index_var_name_env_array "${array_name}" $arg)"'}'
  done
}
_set_env_array () {
  local array_name="$( _sanitise_env_var_names "$1" )"
  shift 1
  local index=-1
  while read line; do
    test $index -lt 0 && is_uint $line && index="$line" && continue
    echo "$line" | sed 'p/^[0-9]+/'
# TODO - finish this function
    echo unfinished
  done < <(get_input_strs "$@" <&1 2>/dev/null)
}
_del_env_array () {
  local array_name="$( _sanitise_env_var_names "$1" )"
  shift 1
  while eval test '${'${array_name}'_SIZE}' -gt 0; do
    quiet _pop_env_array ${array_name}
  done
  eval test '${'${array_name}_SIZE'}' -le 0 && unset ${array_name}_SIZE
}

# Init SAVED_CD vars
test -z "$SAVED_CD_DIRS" &&
  export SAVED_CD_DIRS=0

# Save CD state
cd_save () {
  inc SAVED_CD_DIRS
  eval SAVED_CD_DIR_CURR_$SAVED_CD_DIRS="$(pwd)"
  quiet cd -
  eval SAVED_CD_DIR_PREV_$SAVED_CD_DIRS="$(pwd)"
  quiet cd -
  eval export SAVED_CD_DIR_CURR_$SAVED_CD_DIRS SAVED_CD_DIR_PREV_$SAVED_CD_DIRS
}
alias cd_push=cd_save

# Restore CD state
cd_restore () {
  local prev curr
  curr="$(eval "echo \"\$SAVED_CD_DIR_CURR_$SAVED_CD_DIRS\"")"
  prev="$(eval "echo \"\$SAVED_CD_DIR_PREV_$SAVED_CD_DIRS\"")"
  eval unset SAVED_CD_DIR_CURR_$SAVED_CD_DIRS SAVED_CD_DIR_PREV_$SAVED_CD_DIRS
  dec SAVED_CD_DIRS
  cd $prev
  cd $curr
}

__tab_complete_from_path () {
  local cur=${COMP_WORDS[COMP_CWORD]}
  local curdir="$(echo "$cur" | sed -E 's#([^\/]|\\\/)+$##')"
  COMPREPLY=()
  while test $# -gt 0; do
    test -d "$1" &&
    COMPREPLY+=( $(compgen -W "$( compgen -f "$1/${curdir}" | sed 's#'"$1"'/##')" -- $cur ) )
    shift
  done
}

# Modify Environment Files
evim () {
  cd_save
  cd "$ENV_REPO"
  vim "$@"
  cd_restore
}
_evim () {
  __tab_complete_from_path "$ENV_REPO"
}
checkt complete &&
  complete -F _evim evim

# example Autocomplete
# _foo () {
#   local cur prev opts
#   COMPREPLY=()
#   local files="$(ls -C "$ENV_REPO")"
#   cur="${COMP_WORDS[COMP_CWORD]}"
#   prev="${COMP_WORDS[COMP_CWORD-1]}"
#   opts="--help ${files}"
# }


# Reset Initialisation Environment Variables
rinit() {
  for i in $(env | cut -f1 -d'=' | egrep "^_[A-Z_]*_INIT$"); do
    ercho "$_magenta> unset $i"
    unset "$i"
  done
}
# Reload Interactive Environment
renv() {
  rinit
  local env_file=$(echo "$HOME/.$(echo "$SHELL" | sed -E 's#(.*/)?([^/]*)sh$#\2sh#')rc")
  test -f "$env_file" && source "$env_file"
  quiet cleanPATH
}
rlogin () {
  rinit
  local env_file="$HOME/.profile"
  test -f "$env_file" || env_file="$HOME/.${SHELL_NAME}_profile"
  test -f "$env_file" || env_file="$HOME/.$(echo $SHELL_NAME | sed -E "s/(.).*/\1/")profile"
  test -f "$env_file" && source "$env_file"
}
exporf renv rinit
alias qrenv='quiet renv'
alias renvq='quiet renv'
alias reinit='rinit'
alias gpe='(cd $ENV_REPO; gp; )'

# Make an alias for a script
mk_script_alias() {
if test "$#" -lt 2; then
  ercho "USAGE: mk_script_alias <script.sh>"
  return $?
fi
  local alias_name="$( echo "$1" | sed -E 's/\W+/_/g' )"
  local file_name="$( realpath "$2")"
  local command_name=""
  if test "$3" = "source"; then
    command_name="source "
    shift
  fi
  shift 2
  test -f "$file_name" || return $?
  alias ${alias_name}="${command_name}${file_name} $*"
}

# Piping Commands
alias lower="tr '[:upper:]' '[:lower:]'"
alias upper="tr '[:lower:]' '[:upper:]'"

# Numeric Commands
is_number() { quiet test $1 -gt 0 && quiet test $? -eq 0; }
is_uint () { quiet test  $1 -ge 0 ; }
is_int () {
  # pattern matching requires no quotes around the pattern
  [[ "$1" =~ ^-?[0-9]+$ ]]
  return $?
}
exporf is_number is_uint is_int
find_evar () {
  env |
    gi "^$(echo "$*" |
    sed -E 's/([\[\]{}()\*\+.\\|])/\\\1/g' |
    tr ' ' '|' )"
}
qfind_evar () { find_evar "$@" | quiet cat; }
exporf find_evar qfind_evar
# TMP Directory
export _ENV_TOOLS_TMP_COUNTER=0
tmp () {
  local filename
  while test $# -gt 0; do
    filename="$TMPDIR/$( echo $1 | sed 's/[^a-z0-9_.-]+/_/gi' )"
    if test -e "$filename"; then
      1>&2 echo -e "$RED$filename ${YELLOW}exists$NO_COLOR"
    else
      test_run touch "$filename"
      inc _ENV_TOOLS_TMP_COUNTER
      export _ENV_TOOLS_TMP_COUNTER
      echo "$filename"
    fi
    shift 1
  done
}

# Clean Old tmp Files
clean_tmp_files () {
  local tmpdir_root="$(echo $TMPDIR | sed -E 's#/[^/]+/?$##')"
  test -d "$tmpdir_root" || return $?
  local tmps_=$(ls $tmpdir_root -Alt --time-style=+$DATE_FORMAT | grep "$USER" | sed 's/.*'"$USER"'//' | cut --complement -d' ' -f1-3 )
  local fdate_='' fname_=''
  local expired_date_="$(date --date='8 days ago' +$DATE_FORMAT )"
  while read t; do
    fname_="$( echo "$t" | cut --complement -d' ' -f1 )"
    fdate_=$( echo "$t" | cut -f1 -d' ' )
    if test $(expr $fdate_ + 0) -lt $(expr $expired_date_ + 0) ; then
      rm -r "$tmpdir_root/$fname_"
    fi
  done < <(echo "$tmps_")

}
exporf clean_tmp_files

export ENV_TOOLS=true

# ENV TOOLS END
unset _ENV_TOOLS_INIT
